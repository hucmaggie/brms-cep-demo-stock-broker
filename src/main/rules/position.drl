/*
 * Copyright 2010 JBoss Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.drools.examples.broker

import org.drools.examples.broker.model.SuddenDropEvent
import org.drools.examples.broker.model.PortfolioAction
import org.drools.examples.broker.model.Action
import java.util.Map
import java.util.HashMap
import org.kie.api.runtime.process.WorkflowProcessInstance;
import function org.drools.examples.broker.misc.BrokerUtils.selectAction

dialect "mvel"

// an event declaration to represent situations
// where a sudden drop happens. In this case we are not
// defining any explicit expiration policy.
declare SuddenDropEvent
    @role( event )
end

// here we have an example of a rule that controls a process
rule "Start adjust position process"
when
    $sde : SuddenDropEvent( ) from entry-point "Analysis Events"
   // PortfolioAction(acton : action);
then
    System.out.println("start process");
    variables = [ "symbol" : $sde.symbol ,"action" : $sde.action];
     WorkflowProcessInstance processInstance  = (WorkflowProcessInstance) drools.getKnowledgeRuntime().startProcess( "adjust position", variables );
     $sde.setProcessInstance(processInstance);
end


// below we have rules controlled by the process,
// i.e., the process will fire these rules when necessary
// to re-evaluate the position
rule "If the drop is between 6% and 8%, buy more shares"
    ruleflow-group "evaluate position"
when
    $sde : SuddenDropEvent( percent >= -0.08 && < -0.06 , action==null) from entry-point "Analysis Events"
then
    with( pa = new PortfolioAction() ) {
        action = Action.BUY,
        symbol = $sde.symbol,
        quant = 100
    }
   // kcontext.getProcessInstace().setVariable("action","BUY");
    //modify( $sde ) { action = "BUY" }
    //insert( pa );
    $sde.setVariable("action","BUY");
end    

rule "If the drop is on more than 8%, sell shares"
    ruleflow-group "evaluate position"
when
    $sde : SuddenDropEvent( percent < -0.08 ,action==null) from entry-point "Analysis Events"
then
    with( pa = new PortfolioAction() ) {
        action = Action.SELL,
        symbol = $sde.symbol,
        quant = 100
    }
    // modify( $sde ) { action = "SELL" }
    $sde.setVariable("action","SELL");
    //insert( pa );
end    


rule "If the drop is between 5% and 6%, do nothing"
    ruleflow-group "evaluate position"
when
    $sde : SuddenDropEvent( percent >= -0.06 ,action==null) from entry-point "Analysis Events"
then
    with( pa = new PortfolioAction() ) {
        action = Action.NOACTION,
        symbol = $sde.symbol
    }
     //modify( $sde ) { action = "NOACTION" }
     // kcontext.kcontext.getProcessInstace().setVariable("action","NOACTION");
    $sde.setVariable("action","NOACTION");
   // insert( pa );
end    

